import:
  - graphs/{{DEVICE}}.yaml
  - graphs/classification.yaml
  {% if RECORD_DATA == 'true' %}
  - graphs/record.yaml
  {% endif %}
graphs:

  - id: Broker
    nodes:
    - id: proxy
      module: timeflux.nodes.zmq
      class: Broker

  - id: Preprocessing
    nodes:
    - id: sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [raw]
    - id: rereference
      module: nodes.rereference
      class: Mean
    - id: notch
      module: timeflux_dsp.nodes.filters
      class: IIRFilter
      params:
        filter_type: bandstop
        frequencies: [48, 52]
        order: 3
    - id: bandpass
      module: timeflux_dsp.nodes.filters
      class: IIRFilter
      params:
        filter_type: bandpass
        frequencies: [1, 25]
        order: 2
    - id: pub
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: filtered
    edges:
      - source: sub:raw
        target: rereference
      - source: rereference
        target: notch
      - source: notch
        target: bandpass
      - source: bandpass
        target: pub
    rate: 10

  - id: UI
    nodes:
    - id: uiexpe
      module: timeflux_ui.nodes.ui
      class: UI
      params:
        routes:
          app: ./www/expe
        settings:
          app:
            layout:
              calibration: {{CALIBRATION_LAYOUT}}
              task: {{TASK_LAYOUT}}
            codes:
              calibration:
              {% for CODE in CALIBRATION_CODES.split() %}
                - "{{CODE}}"
              {% endfor %}
              task:
              {% for CODE in TASK_CODES.split() %}
                - "{{CODE}}"
              {% endfor %}
            stim:
              type: {{ STIM_TYPE }} 
              depth:  {{ STIM_DEPTH }}
            calibration:
              blocks: {{ CALIBRATION_BLOCKS }}
              repetitions: {{ CALIBRATION_STIM_REP }}
              active_only: true
              duration_rest: {{ CALIBRATION_DURATION_REST }}
              duration_cue_on: {{ CALIBRATION_DURATION_CUE_ON }}
              duration_cue_off: {{ CALIBRATION_DURATION_CUE_OFF }}
            task:
              cue:
                enable: {{ CUED_TASK_ENABLE }}
                targets: {{ CUED_TASK_TARGET_REP }}
              sequence:
                enable: {{ PINPAD_ENABLE_TASK }}
                sequences: {{ PINPAD_SEQUENCES }}
                cue_target: {{ PINPAD_CUE_TARGET }}
                cue_feedback: {{ PINPAD_CUE_FEEDBACK }}
            run:
              duration_rest: {{ TASK_DURATION_REST }}
              duration_lock_on: {{ TASK_DURATION_LOCK_ON }}
              duration_lock_off: {{ TASK_DURATION_LOCK_OFF }}
            colors:
              background: "#{{ UI_BACKGROUND }}"
              text: "#{{ UI_TEXT_COLOR }}"
              cross: "#{{ UI_CROSS_COLOR }}"
              target_off: "#{{ UI_TARGET_OFF_COLOR }}"
              target_on: "#{{ UI_TARGET_ON_COLOR }}"
              target_border: "#{{ UI_TARGET_BORDER_COLOR}}"
              target_cue: "#{{ UI_TARGET_CUE_COLOR }}"
              target_success: "#{{ UI_TARGET_SUCCESS_COLOR }}"
              target_failure: "#{{ UI_TARGET_FAILURE_COLOR }}"
              target_lock: "#{{ UI_TARGET_LOCK_COLOR }}"
    - id: sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [ filtered, predictions , events, raw]
    - id: pubexpe
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: events
    edges:
    - source: uiexpe:events
      target: pubexpe
    - source: sub:filtered
      target: uiexpe:eeg
    - source: sub:predictions
      target: uiexpe:predictions
    rate: 20

  # - id: Debug
  #   nodes:
  #   - id: sub
  #     module: timeflux.nodes.zmq
  #     class: Sub
  #     params:
  #       topics: [ events, predictions ]
  #   - id: display_events
  #     module: timeflux.nodes.debug
  #     class: Display
  #     params:
  #       meta: true
  #   - id: display_predictions
  #     module: timeflux.nodes.debug
  #     class: Display
  #     params:
  #       meta: true
  #   edges:
  #     - source: sub:events
  #       target: display_events
  #     - source: sub:predictions
  #       target: display_predictions
  #   rate: 10




